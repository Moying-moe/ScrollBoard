{"version":3,"sources":["serviceWorker.ts","app/util.ts","app/Loader.tsx","app/vo.ts","app/Board.tsx","app/App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","readFile","file","Promise","resolve","reject","reader","FileReader","onload","e","target","result","toString","onerror","readAsText","getRemoteFileUrl","value","queryString","search","ProblemStateKind","Loader","onLoad","onStart","useState","fileName","setFileName","fileInputRef","useRef","data","setData","handleLoad","a","currentTarget","files","item","util","content","JSON","parse","name","useEffect","remoteFileUrl","fetch","resp","json","loadRemote","catch","err","console","error","Form","useForm","form","style","borderColor","boxShadow","type","display","multiple","ref","onChange","justify","alignItems","flexGrow","textAlign","margin","icon","UploadOutlined","onClick","current","click","marginTop","column","xs","lg","title","width","fontSize","Item","label","duration","freezeTime","penaltyTime","problems","length","teams","submissions","span","flexWrap","map","p","key","id","marginRight","tag","height","backgroundColor","color","borderRadius","valuePropName","justifyContent","PlayCircleOutlined","autoReveal","getFieldValue","reveal","calcRankInplace","state","teamStates","sort","lhs","rhs","solved","penalty","team","last_solved","last_penalty","last_rank","forEach","idx","rank","checked","cursor","index","problemStates","find","Pending","isAccepted","unrevealedSubmissions","some","s","accepted","tick","teamId","problemId","problem","Passed","findIndex","tryCount","acceptTime","submitTime","Math","floor","contest","Failed","revealedSubmissions","push","prevRank","curRank","log","padEnd","cvtColor","vo","Board","options","useMemo","teamMap","Map","contestant","set","Untouched","submission","get","Error","Array","from","entries","setState","highlightItem","setHighlightItem","revealGen","highlightNodeRef","highlightFlag","setHighlightFlag","keyLock","setKeyLock","handleNextStep","useCallback","prevCursorIdx","next","rect","document","querySelector","getBoundingClientRect","scrollTo","left","top","scrollY","innerHeight","behavior","done","setTimeout","dis","count","frame","scrollBy","dur","requestAnimationFrame","handleKeydown","preventDefault","stopPropagation","addEventListener","removeEventListener","timer","setInterval","clearInterval","zIndex","position","overflowAnchor","isFocused","undefined","isHighlighted","grid","minWidth","minHeight","wrappedGrid","CSSTransition","in","timeout","classNames","nodeRef","App","setOptions","running","setRunning","handleStart","debug","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","message"],"mappings":"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","file":"static/js/main.ffd8fcc4.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export function readFile(file: File): Promise<string> {\n    return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onload = (e: ProgressEvent<FileReader>): void => {\n            resolve(e.target?.result?.toString());\n        };\n\n        reader.onerror = ((e): void => reject(e));\n\n        reader.readAsText(file);\n    });\n}","import * as dto from \"./dto\";\nimport * as util from \"./util\";\nimport * as vo from \"./vo\";\n\nimport React, { useState, useRef, useEffect, } from \"react\";\nimport { Card, Button, Row, Divider, Descriptions, Space, Tag, Col, Form, Switch } from \"antd\";\nimport { UploadOutlined, PlayCircleOutlined } from \"@ant-design/icons\";\nimport * as queryString from \"query-string\";\n\nexport interface LoaderProps {\n    onLoad: (data: dto.Contest) => void;\n    onStart: (options: vo.BoardOptions) => void;\n}\n\nfunction getRemoteFileUrl(): string | undefined {\n    const value = queryString.parse(window.location.search)[\"data-url\"];\n    if (typeof value === \"string\") {\n        return value;\n    } else {\n        return undefined;\n    }\n}\n\nconst Loader: React.FC<LoaderProps> = ({ onLoad, onStart }: LoaderProps) => {\n    const [fileName, setFileName] = useState<string | null>();\n    const fileInputRef = useRef<HTMLInputElement | null>(null);\n\n    const [data, setData] = useState<dto.Contest | null>(null);\n\n    const handleLoad = async (e: React.ChangeEvent<HTMLInputElement>): Promise<void> => {\n        const file = e.currentTarget.files?.item(0);\n        if (file) {\n            const content = await util.readFile(file);\n            const data = JSON.parse(content) as unknown as dto.Contest; // FIXME: validate\n            setFileName(file.name);\n            setData(data);\n            onLoad(data);\n        }\n    };\n\n    useEffect(() => {\n        const loadRemote = async (): Promise<void> => {\n            const remoteFileUrl: string | undefined = getRemoteFileUrl();\n            if (remoteFileUrl) {\n                const resp = await fetch(remoteFileUrl);\n                const data = await resp.json() as unknown as dto.Contest; // FIXME: validate\n                setFileName(remoteFileUrl);\n                setData(data);\n                onLoad(data);\n            }\n        };\n        loadRemote().catch(err => console.error(err));\n    }, [onLoad]);\n\n    const [form] = Form.useForm();\n\n    return (\n        <Card\n            style={{\n                borderColor: \"transparent\",\n                boxShadow: \"0 1px 2px -2px rgba(0, 0, 0, 0.16), 0 3px 6px 0 rgba(0, 0, 0, 0.12), 0 5px 12px 4px rgba(0, 0, 0, 0.09)\",\n            }}\n        >\n            <input\n                type=\"file\"\n                style={{ display: \"none\" }}\n                multiple={false}\n                ref={fileInputRef}\n                onChange={handleLoad}\n            />\n            <Row justify=\"center\" style={{ alignItems: \"baseline\" }}>\n                {(fileName) ? (\n                    <span style={{ flexGrow: 1, textAlign: \"center\", margin: \"0 1em\" }}>\n                        {fileName}\n                    </span>\n                ) : null}\n                <Button\n                    icon={<UploadOutlined />}\n                    onClick={(): void => fileInputRef.current?.click()}\n                >\n                    加载数据\n                </Button>\n            </Row>\n            {data === null ? null : (\n                <>\n                    <Divider style={{ margin: \"1em 0\" }} />\n                    <Row style={{ marginTop: \"1em\" }}>\n                        <Descriptions\n                            column={{ xs: 1, lg: 3 }}\n                            title={\n                                <span\n                                    style={{\n                                        display: \"inline-block\",\n                                        width: \"100%\",\n                                        textAlign: \"center\",\n                                        fontSize: \"1.5em\"\n                                    }}\n                                >\n                                    {data.name}\n                                </span>\n                            }\n                        >\n                            <Descriptions.Item label=\"比赛时长\">\n                                {data.duration / 60000} 分钟\n                            </Descriptions.Item>\n                            <Descriptions.Item label=\"封榜时刻\">\n                                {data.freezeTime / 60000}  分钟\n                            </Descriptions.Item>\n                            <Descriptions.Item label=\"罚时单位\">\n                                {data.penaltyTime / 60000} 分钟\n                            </Descriptions.Item>\n                            <Descriptions.Item label=\"题目数量\">\n                                {data.problems.length}\n                            </Descriptions.Item>\n                            <Descriptions.Item label=\"队伍数量\">\n                                {data.teams.length}\n                            </Descriptions.Item>\n                            <Descriptions.Item label=\"提交数量\">\n                                {data.submissions.length}\n                            </Descriptions.Item>\n                            <Descriptions.Item label=\"题目颜色\" span={3}>\n                                <Space style={{\n                                    display: \"inline-flex\",\n                                    flexWrap: \"wrap\"\n                                }}>\n                                    {data.problems.map(p => {\n                                        return (\n                                            <Tag\n                                                key={p.id}\n                                                style={{\n                                                    display: \"inline-flex\",\n                                                    alignItems: \"center\",\n                                                }}\n                                            >\n                                                <strong style={{ marginRight: \"0.5em\" }}>{p.tag}</strong>\n                                                <span\n                                                    style={{\n                                                        display: \"inline-block\",\n                                                        width: \"1em\",\n                                                        height: \"1em\",\n                                                        backgroundColor: p.color,\n                                                        borderRadius: \"50%\"\n                                                    }}\n                                                />\n                                            </Tag>\n                                        );\n                                    })}\n                                </Space>\n                            </Descriptions.Item>\n                        </Descriptions>\n                    </Row>\n                    <Row>\n                        <Form form={form}>\n                            <Form.Item name=\"autoReveal\" label=\"自动运行\" valuePropName=\"checked\">\n                                <Switch />\n                            </Form.Item>\n                        </Form>\n                    </Row>\n                    <Row justify=\"center\">\n                        <Col span={6} style={{ display: \"flex\", justifyContent: \"center\" }}>\n                            <Button\n                                icon={<PlayCircleOutlined />}\n                                onClick={() => onStart({ autoReveal: !!form.getFieldValue(\"autoReveal\") })}\n                                style={{ width: \"100%\" }}\n                            >\n                                开始\n                            </Button>\n                        </Col>\n                    </Row>\n                </>\n            )}\n        </Card>\n    );\n};\n\nexport default Loader;\n","import * as dto from \"./dto\";\n\nexport interface TeamState {\n    team: dto.Team;\n    rank: number;\n    solved: number;\n    penalty: number;\n    problemStates: ProblemState[]\n}\n\nexport interface ProblemState {\n    problem: dto.Problem;\n    revealedSubmissions: dto.Submission[];\n    unrevealedSubmissions: dto.Submission[];\n    state: ProblemStateKind;\n    tryCount: number;\n    acceptTime: number | null;\n}\n\nexport enum ProblemStateKind {\n    Passed,\n    Failed,\n    Pending,\n    Untouched,\n}\n\nexport interface ContestState {\n    teamStates: TeamState[]\n    contest: dto.Contest;\n    cursor: { index: number, tick: number };\n}\n\nexport function calcContestState(data: dto.Contest): ContestState {\n    const teamMap: Map<string, TeamState> = new Map<string, TeamState>();\n    data.teams.forEach(contestant => {\n        teamMap.set(\n            contestant.id,\n            {\n                team: contestant,\n                rank: 0,\n                solved: 0,\n                penalty: 0,\n                problemStates: data.problems.map(problem => ({\n                    problem,\n                    revealedSubmissions: [],\n                    unrevealedSubmissions: [],\n                    state: ProblemStateKind.Untouched,\n                    tryCount: 0,\n                    acceptTime: null,\n                }))\n            });\n    });\n\n    data.submissions.sort((lhs, rhs) => lhs.submitTime - rhs.submitTime);\n\n    data.submissions.forEach(submission => {\n        const team = teamMap.get(submission.teamId);\n        if (!team) {\n            throw new Error(\"invalid data\");\n        }\n        const p = team.problemStates.find(p => p.problem.id === submission.problemId);\n        if (!p) {\n            throw new Error(\"invalid data\");\n        }\n        if (p.state === ProblemStateKind.Passed) {\n            return;\n        }\n        if (submission.submitTime < data.freezeTime) {\n            p.revealedSubmissions.push(submission);\n            p.tryCount += 1;\n            if (submission.accepted) {\n                p.state = ProblemStateKind.Passed;\n                p.acceptTime = submission.submitTime;\n                team.solved += 1;\n                team.penalty += Math.floor(p.acceptTime / 60000) * 60000 + data.penaltyTime * (p.tryCount - 1);\n            } else {\n                p.state = ProblemStateKind.Failed;\n            }\n        } else {\n            p.unrevealedSubmissions.push(submission);\n            p.tryCount += 1;\n            p.state = ProblemStateKind.Pending;\n        }\n    });\n\n    const teamStates = Array.from(teamMap.entries()).map((e) => e[1]);\n    const state = { teamStates, contest: data, cursor: { index: teamStates.length - 1, tick: 0 } };\n    calcRankInplace(state);\n    return state;\n}\n\nexport function calcRankInplace(state: ContestState): void {\n    state.teamStates.sort((lhs, rhs) => {\n        if (lhs.solved !== rhs.solved) {\n            return -(lhs.solved - rhs.solved);\n        }\n        if (lhs.penalty !== rhs.penalty) {\n            return (lhs.penalty - rhs.penalty);\n        }\n        if (lhs.team.name !== rhs.team.name) {\n            return lhs.team.name < rhs.team.name ? (-1) : (1);\n        }\n        return 0;\n    });\n\n    let last_solved = 0;\n    let last_penalty = 0;\n    let last_rank = 0;\n    state.teamStates.forEach((team, idx) => {\n        if (team.solved < last_solved || team.penalty > last_penalty) {\n            last_rank = idx + 1;\n        }\n        team.rank = last_rank;\n        last_solved = team.solved;\n        last_penalty = team.penalty;\n    });\n}\n\nexport type HighlightItem = {\n    teamId: string;\n    problemId: string;\n    accepted: boolean;\n}\n\nexport type RevealGen = Generator<HighlightItem | undefined, void, void>;\n\nexport function* reveal(state: ContestState): Generator<HighlightItem | undefined, void, void> {\n    let checked = false;\n    while (state.cursor.index >= 0) {\n        const team = state.teamStates[state.cursor.index];\n        const p = team.problemStates.find(p => p.state === ProblemStateKind.Pending);\n        if (p) {\n            const isAccepted = p.unrevealedSubmissions.some((s) => s.accepted);\n            state.cursor.tick += 1;\n            yield {\n                teamId: team.team.id,\n                problemId: p.problem.id,\n                accepted: isAccepted\n            };\n            if (isAccepted) {\n                p.state = ProblemStateKind.Passed;\n                const idx = p.unrevealedSubmissions.findIndex(s => s.accepted);\n                p.tryCount = p.tryCount - p.unrevealedSubmissions.length + idx + 1;\n                p.acceptTime = p.unrevealedSubmissions[idx].submitTime;\n                team.solved += 1;\n                team.penalty += Math.floor(p.acceptTime / 60000) * 60000 + state.contest.penaltyTime * (p.tryCount - 1);\n            } else {\n                p.state = ProblemStateKind.Failed;\n            }\n            p.revealedSubmissions.push(...p.unrevealedSubmissions);\n            p.unrevealedSubmissions = [];\n            yield;\n            const prevRank = team.rank;\n            calcRankInplace(state);\n            const curRank = team.rank;\n            console.log(`team \"${team.team.name.padEnd(30, \" \")}\" rank ${prevRank} -> ${curRank}`);\n            state.cursor.tick += 1;\n            yield;\n            checked = true;\n        }\n        else {\n            if (!checked) {\n                console.log(\"yield at cursor index = \", state.cursor.index);\n                state.cursor.tick += 1;\n                yield;\n            }\n            state.cursor.index -= 1;\n            checked = false;\n        }\n    }\n}\n\nexport interface BoardOptions {\n    autoReveal: boolean;\n}","import \"./Board.css\";\n\nimport * as dto from \"./dto\";\nimport * as vo from \"./vo\";\n\nimport React, { useState, useEffect, useCallback, useRef, useMemo } from \"react\";\nimport FlipMove from \"react-flip-move\";\nimport { StickyContainer, Sticky } from \"react-sticky\";\nimport { CSSTransition } from \"react-transition-group\";\n\nfunction cvtColor(state: vo.ProblemStateKind): string | undefined {\n    if (state === vo.ProblemStateKind.Passed) {\n        return \"green\";\n    }\n    if (state === vo.ProblemStateKind.Failed) {\n        return \"red\";\n    }\n    if (state === vo.ProblemStateKind.Pending) {\n        return \"orange\";\n    }\n    return undefined;\n}\n\ninterface BoardProps {\n    data: dto.Contest;\n    options: vo.BoardOptions;\n}\n\nconst Board: React.FC<BoardProps> = ({ data, options }: BoardProps) => {\n\n    const [state, setState] = useState<vo.ContestState>(useMemo(() => vo.calcContestState(data), [data]));\n\n    const [highlightItem, setHighlightItem] = useState<vo.HighlightItem | null>(null);\n\n    const revealGen = useRef<vo.RevealGen>(vo.reveal(state));\n\n    const highlightNodeRef = useRef<HTMLSpanElement | null>(null);\n\n    const [highlightFlag, setHighlightFlag] = useState<boolean>(false);\n\n    const [keyLock, setKeyLock] = useState<boolean>(false);\n\n    const handleNextStep = useCallback(() => {\n        console.log(\"handleNextStep\");\n        const prevCursorIdx = state.cursor.index;\n        const item = revealGen.current.next();\n        if (state.cursor.index !== prevCursorIdx && state.cursor.index >= 0) {\n            const team = state.teamStates[state.cursor.index];\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            const element = document.querySelector<HTMLTableRowElement>(`#team-id-${team.team.id}`)!;\n            const rect = element.getBoundingClientRect();\n            window.scrollTo({ left: 0, top: window.scrollY + rect.top - window.innerHeight / 2, behavior: \"smooth\" });\n        }\n        console.log(\"cursor index = \", state.cursor.index);\n        if (!item.done) {\n            if (item.value) {\n                console.log(\"reveal highlight\");\n                setKeyLock(true);\n                setHighlightItem(item.value);\n                setTimeout(() => handleNextStep(), 1200);\n                setTimeout(() => {\n                    handleNextStep();\n                    setKeyLock(false);\n                    console.log(\"unlocked\");\n                }, 1500 + (item.value.accepted ? 500 : 0));\n            } else {\n                setHighlightItem(null);\n            }\n        } else {\n            setHighlightItem(null);\n        }\n        setState({ ...state });\n        return item.done;\n    }, [state]);\n\n    useEffect(() => {\n        if (state.cursor.tick === 0) {\n            const team = state.teamStates[state.cursor.index];\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            const element = document.querySelector<HTMLTableRowElement>(`#team-id-${team.team.id}`)!;\n            const dis = element.getBoundingClientRect().top + window.scrollY;\n            const dur = 10;\n            let count = 0;\n            const frame = () => {\n                window.scrollBy({ left: 0, top: dis / dur / 60, behavior: \"auto\" });\n                count += 1;\n                if (count < dur * 60) {\n                    window.requestAnimationFrame(frame);\n                } else {\n                    setKeyLock(false);\n                }\n            };\n            setKeyLock(true);\n            setTimeout(() => {\n                window.requestAnimationFrame(frame);\n            }, 2000);\n        }\n    }, [state]);\n\n    const handleKeydown = useCallback((e: KeyboardEvent) => {\n        if (keyLock) {\n            return;\n        }\n        console.log(\"keydown\");\n        e.preventDefault();\n        e.stopPropagation();\n        if (e.key === \"Enter\") {\n            handleNextStep();\n        }\n    }, [handleNextStep, keyLock]);\n\n    useEffect(() => {\n        document.addEventListener(\"keydown\", handleKeydown);\n        return () => document.removeEventListener(\"keydown\", handleKeydown);\n\n    }, [handleKeydown]);\n\n    useEffect(() => {\n        if (state.cursor.tick !== 0 && options.autoReveal) {\n            const timer = setInterval(() => {\n                if (keyLock) { return; }\n                const done = handleNextStep();\n                if (done) { clearInterval(timer); }\n            }, 500);\n            return () => clearInterval(timer);\n        }\n    }, [state, keyLock, handleNextStep, options]);\n\n    useEffect(() => {\n        if (highlightItem) {\n            const timer = setInterval(() => {\n                setHighlightFlag(!highlightFlag);\n            }, 400);\n            return () => clearInterval(timer);\n        }\n    }, [highlightItem, highlightFlag]);\n\n    return (\n        <StickyContainer style={{ width: \"100%\" }}>\n            <Sticky>\n                {({ style }) => (\n                    <table\n                        style={{\n                            width: \"100%\",\n                            fontSize: \"2em\",\n                            textAlign: \"center\",\n                            backgroundColor: \"white\",\n                            zIndex: 1024,\n                            boxShadow: \"0 5px 8px 4px rgba(0, 0, 0, 0.09)\",\n                            ...style\n                        }}\n                    >\n                        <thead>\n                            <tr>\n                                <th style={{ width: \"5%\" }}>\n                                    <span\n                                        style={{\n                                            position: \"absolute\", zIndex: 2048, top: 0, left: 0,\n                                            borderRadius: \"50%\", width: \"6px\", height: \"6px\",\n                                            backgroundColor: keyLock ? \"#ff4d4f\" : \"#52c41a\"\n                                        }}\n                                    />\n                                    Rank\n                                </th>\n                                <th style={{ width: \"25%\" }}>\n                                    Team\n                                </th>\n                                <th style={{ width: \"10%\" }}>\n                                    Score\n                                </th>\n                                {data.problems.map(p => (\n                                    <th\n                                        key={p.id}\n                                        style={{\n                                            width: `${60 / data.problems.length}%`,\n                                        }}\n                                    >\n                                        <span\n                                            style={{\n                                                display: \"inline-flex\",\n                                                alignItems: \"center\"\n                                            }}\n                                        >\n                                            <strong style={{ marginRight: \"0.5em\" }}>{p.tag}</strong>\n                                            <span\n                                                style={{\n                                                    display: \"inline-block\",\n                                                    width: \"1em\",\n                                                    height: \"1em\",\n                                                    backgroundColor: p.color,\n                                                    borderRadius: \"50%\"\n                                                }}\n                                            />\n                                        </span>\n                                    </th>\n                                ))}\n                            </tr>\n                        </thead>\n                    </table>\n                )}\n            </Sticky>\n\n            <FlipMove\n                style={{\n                    width: \"100%\",\n                    overflowAnchor: \"none\",\n                    fontSize: \"2em\",\n                    textAlign: \"center\",\n                }}\n                duration={2000}\n            >\n\n                {state.teamStates.map((team, idx) => {\n                    const isFocused = idx === state.cursor.index;\n\n                    return (\n                        <table\n                            key={team.team.id}\n                            id={`team-id-${team.team.id}`}\n                            style={{\n                                width: \"100%\",\n                                boxShadow:\n                                    isFocused ?\n                                        \"0 5px 12px 4px rgba(0, 0, 0, 0.09), 0 -5px 12px 4px rgba(0, 0, 0, 0.09)\"\n                                        : undefined\n                            }}\n                        >\n                            <tbody>\n                                <tr>\n                                    <td style={{ width: \"5%\" }}>\n                                        {team.rank}\n                                    </td>\n                                    <td style={{ width: \"25%\" }}>\n                                        {team.team.name}\n                                    </td>\n                                    <td style={{ width: \"10%\" }}>\n                                        {`${team.solved} - ${Math.floor(team.penalty / 60000)}`}\n                                    </td>\n                                    {team.problemStates.map((p) => {\n                                        const isHighlighted = highlightItem\n                                            && highlightItem.teamId === team.team.id\n                                            && highlightItem.problemId === p.problem.id;\n\n                                        const grid = (\n                                            <span\n                                                style={{\n                                                    display: \"inline-block\",\n                                                    minWidth: \"4em\",\n                                                    minHeight: \"1em\",\n                                                    borderRadius: \"0.25em\",\n                                                    backgroundColor: cvtColor(p.state),\n                                                    color: \"white\",\n                                                }}\n                                                ref={isHighlighted ? highlightNodeRef : null}\n                                            >\n                                                {p.state === vo.ProblemStateKind.Passed ?\n                                                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                                                    `${p.tryCount} - ${Math.floor(p.acceptTime! / 60000)}`\n                                                    : `${p.tryCount}`\n                                                }\n                                            </span>\n                                        );\n\n                                        const wrappedGrid = isHighlighted ? (\n                                            <CSSTransition\n                                                in={highlightFlag}\n                                                timeout={400}\n                                                classNames=\"problem-grid\"\n                                                nodeRef={highlightNodeRef}\n                                            >\n                                                {grid}\n                                            </CSSTransition>\n                                        ) : grid;\n\n                                        return (\n                                            <td key={p.problem.id} style={{ width: `${60 / team.problemStates.length}%` }}>\n                                                {wrappedGrid}\n                                            </td>\n                                        );\n                                    })}\n                                </tr>\n                            </tbody>\n                        </table>\n                    );\n                })}\n            </FlipMove>\n        </StickyContainer>\n    );\n};\n\nexport default Board;","import \"antd/dist/antd.css\";\nimport \"./App.css\";\n\nimport * as dto from \"./dto\";\nimport * as vo from \"./vo\";\nimport Loader from \"./Loader\";\n\nimport React, { useState, useCallback, } from \"react\";\nimport { Row, Col, } from \"antd\";\nimport Board from \"./Board\";\n\nconst App: React.FC = () => {\n    const [data, setData] = useState<dto.Contest | null>(null);\n    const [options, setOptions] = useState<vo.BoardOptions | null>(null);\n\n    const [running, setRunning] = useState(false);\n\n    const handleStart = useCallback((options) => {\n        setRunning(true);\n        setOptions(options);\n        console.debug(data, options);\n    }, [data]);\n\n    return (\n        <>\n            {!running ? (\n                <Row justify=\"center\" style={{ marginTop: \"0em\", alignItems: \"center\", minHeight: \"80vh\" }}>\n                    <Col span={24} lg={16}>\n                        <Loader onLoad={(data) => setData(data)} onStart={handleStart} />\n                    </Col>\n                </Row>\n            ) : null}\n            {(data !== null && running) ? (\n                <>\n                    <Row justify=\"center\" style={{ width: \"calc(100vw - 4px)\" }}>\n                        {/* eslint-disable-next-line @typescript-eslint/no-non-null-assertion */}\n                        <Board data={data} options={options!} />\n                    </Row>\n                    <div style={{ minHeight: \"50vh\" }}></div>\n                </>\n            ) : null}\n        </>\n    );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport App from \"./app/App\";\n\nReactDOM.render(\n    // <React.StrictMode>\n    <App />,\n    // </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}